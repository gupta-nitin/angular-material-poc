<div>
  <form [formGroup]="filterForm" (ngSubmit)="onSubmit()">
    <div class="filter-row" *ngFor="let row of filteredColumns | slice:0:rowCount; let i = index">
      <div class="filter-column" *ngFor="let column of row">
        <ng-container *ngIf="column.enableFilter">
          <div [ngSwitch]="column.type">
            <mat-form-field *ngSwitchCase="GridColumnType.Text">
              <mat-label>{{ column.name }}</mat-label>
              <input matInput [formControlName]="column.id">
            </mat-form-field>
            
            <mat-form-field *ngSwitchCase="GridColumnType.Date">
              <mat-label>{{ column.name }}</mat-label>
              <input matInput [matDatepicker]="column.id + 'Picker'" [formControlName]="column.id">
              <mat-datepicker-toggle matSuffix [for]="column.id + 'Picker'"></mat-datepicker-toggle>
              <mat-datepicker #asofDatePicker></mat-datepicker>
            </mat-form-field>

            <mat-form-field *ngSwitchCase="GridColumnType.Number">
              <mat-label>{{ column.name }}</mat-label>
              <input matInput type="number" [formControlName]="column.id">
            </mat-form-field>
          </div>
        </ng-container>
      </div>
    </div>   
  </form>
</div>

---------------

import { Component, Input, OnInit } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { DataGridColumns } from 'src/app/shared/models/grid-interfaces.model';
import { GridColumnType } from 'src/app/shared/enums/grid-enums';

@Component({
  selector: 'app-basic-filter',
  templateUrl: './basic-filter.component.html',
  styleUrls: ['./basic-filter.component.scss']
})
export class BasicFilterComponent implements OnInit {
  @Input() columns: DataGridColumns[];
  filterForm: FormGroup;
  GridColumnType = GridColumnType;
  filteredColumns: DataGridColumns[] = [];
  rowCount: number;

  constructor(private formBuilder: FormBuilder) {}

  ngOnInit(): void {
    this.filteredColumns = this.columns.filter(column => column.enableFilter && column.isActive);
    this.rowCount = Math.ceil(this.filteredColumns.length / 5);
    this.initializeForm();
  }

  initializeForm(): void {
    const group = {};
    this.filteredColumns.forEach(column => {
      group[column.id] = [''];
    });
    this.filterForm = this.formBuilder.group(group);
  }

  onSubmit(): void {
    console.log(this.filterForm.value);
  }

  onReset(): void {
    this.filterForm.reset();
  }
}

