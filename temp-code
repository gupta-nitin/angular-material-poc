import { ComponentFixture, TestBed } from '@angular/core/testing';
import { CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';
import { HealthCheckDashboardComponent } from './health-check-dashboard.component';
import { healthCheckSummaries } from 'src/app/mocks/data/health-checks';
import { of } from 'rxjs';
import { HttpClientTestingModule } from '@angular/common/http/testing';
import { ReactiveFormsModule } from '@angular/forms';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { MaterialCommonModule } from 'src/app/material.module';
import { HealthCheckService } from '../services/health-check.service';
import { Router } from '@angular/router';

describe('HealthCheckDashboardComponent', () => {
  let component: HealthCheckDashboardComponent;
  let fixture: ComponentFixture<HealthCheckDashboardComponent>;
  let healthCheckServiceSpy = jasmine.createSpyObj('HealthCheckService', ['getHealthCheckSummary']);
  let getHealthCheckSummarySpy;

  beforeEach(() => {
    getHealthCheckSummarySpy = healthCheckServiceSpy.getHealthCheckSummary.and.returnValue(of(healthCheckSummaries));

    TestBed.configureTestingModule({
      declarations: [HealthCheckDashboardComponent],
      imports: [HttpClientTestingModule, ReactiveFormsModule, MaterialCommonModule, NoopAnimationsModule],
      schemas: [CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA],
      providers: [
        { provide: HealthCheckService, useValue: healthCheckServiceSpy },
        Router
      ]
    }).compileComponents();

    fixture = TestBed.createComponent(HealthCheckDashboardComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should fetch health check summaries on initialization', () => {
    component.ngOnInit();
    fixture.detectChanges();

    expect(component.dataSource).toEqual(healthCheckSummaries);
    expect(getHealthCheckSummarySpy).toHaveBeenCalled();
  });

  it('should reset form on submit', () => {
    component.ngOnInit();
    fixture.detectChanges();

    component.filterform.setValue({
      sourceSystem: 'sourceSystem',
      targetSystem: 'targetSystem',
      processingDate: new Date(),
      asOfDate: new Date()
    });

    component.onSubmit();
    fixture.detectChanges();

    expect(component.filterform.value).toEqual({
      sourceSystem: '',
      targetSystem: '',
      processingDate: new Date(),  // Change this to match your reset logic
      asOfDate: null  // Assuming 'asOfDate' is reset to null
    });
  });
});
